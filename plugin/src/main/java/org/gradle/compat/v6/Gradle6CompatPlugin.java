/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.gradle.compat.v6;

import org.gradle.api.InvalidUserCodeException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ConfigurationContainer;
import org.gradle.api.artifacts.ConfigurationPublications;
import org.gradle.api.artifacts.PublishArtifact;
import org.gradle.api.artifacts.type.ArtifactTypeDefinition;
import org.gradle.api.internal.artifacts.ArtifactAttributes;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.plugins.PluginManager;
import org.gradle.api.tasks.SourceSet;
import org.gradle.util.GradleVersion;

import static org.gradle.api.plugins.JavaPlugin.API_ELEMENTS_CONFIGURATION_NAME;
import static org.gradle.api.plugins.JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME;
import static org.gradle.api.plugins.JavaPlugin.RUNTIME_ELEMENTS_CONFIGURATION_NAME;

/**
 * A plugin which restores some backwards compatibility with Gradle 6.
 * It must only be applied as a temporary fix, when migrating to Gradle 7 causes
 * some problems, for example with plugins not yet up-to-date.
 */
public class Gradle6CompatPlugin implements Plugin<Project> {
    private final static GradleVersion MIN_VERSION = GradleVersion.version("7.0");
    private final static GradleVersion MAX_VERSION = GradleVersion.version("8.0");
    private final static String COMPILE_CONFIGURATION_NAME = "compile";
    private final static String TEST_COMPILE_CONFIGURATION_NAME = "testCompile";
    private final static String RUNTIME_CONFIGURATION_NAME = "runtime";
    private final static String TEST_RUNTIME_CONFIGURATION_NAME = "testRuntime";

    public void apply(Project project) {
        assertVersion();
        PluginManager pluginManager = project.getPluginManager();
        pluginManager.withPlugin("java-base", p -> {
            ConfigurationContainer configurations = project.getConfigurations();
            JavaPluginConvention javaConvention = project.getConvention().getPlugin(JavaPluginConvention.class);
            javaConvention.getSourceSets().all(sourceSet -> {
                String name = sourceSet.getName();
                if (SourceSet.MAIN_SOURCE_SET_NAME.equals(name)) {
                    createMainConfigurations(configurations);
                } else if (SourceSet.TEST_SOURCE_SET_NAME.equals(name)) {
                    createTestConfigurations(configurations);
                }
            });
        });
    }

    private static void assertVersion() {
        GradleVersion current = GradleVersion.current().getBaseVersion();
        if (current.compareTo(MIN_VERSION) < 0 || current.compareTo(MAX_VERSION) > 0) {
            throw new InvalidUserCodeException("The backport plugin requires must be applied to Gradle 7 only. Detected " + current);
        }
    }

    private void createMainConfigurations(ConfigurationContainer configurations) {
        Configuration compileConfiguration = createBackportedConfiguration(configurations, COMPILE_CONFIGURATION_NAME, "Compile", SourceSet.MAIN_SOURCE_SET_NAME);
        Configuration runtimeConfiguration = createBackportedConfiguration(configurations, RUNTIME_CONFIGURATION_NAME, "Runtime", SourceSet.MAIN_SOURCE_SET_NAME);
        runtimeConfiguration.extendsFrom(compileConfiguration);
        Configuration runtimeClasspathConfiguration = configurations.getByName(RUNTIME_CLASSPATH_CONFIGURATION_NAME);
        runtimeClasspathConfiguration.extendsFrom(runtimeConfiguration);
        configurations.configureEach(cnf -> {
            String name = cnf.getName();
            if (RUNTIME_ELEMENTS_CONFIGURATION_NAME.equals(name)) {
                cnf.extendsFrom(runtimeConfiguration);
                cnf.getOutgoing()
                        .getArtifacts()
                        .stream()
                        .filter(Gradle6CompatPlugin::isJar)
                        .findFirst()
                        .ifPresent(jarArtifact -> {
                            ConfigurationPublications publications = runtimeConfiguration.getOutgoing();
                            publications.getArtifacts().add(jarArtifact);
                            publications.getAttributes().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.JAR_TYPE);
                        });
            } else if (API_ELEMENTS_CONFIGURATION_NAME.equals(name)) {
                cnf.extendsFrom(runtimeConfiguration);
            }
        });
    }

    private static boolean isJar(PublishArtifact artifact) {
        return artifact.getType().equals("jar");
    }

    private void createTestConfigurations(ConfigurationContainer configurations) {
        Configuration compileConfiguration = configurations.getByName(COMPILE_CONFIGURATION_NAME);
        Configuration runtimeConfiguration = configurations.getByName(RUNTIME_CONFIGURATION_NAME);
        Configuration testCompileConfiguration = createBackportedConfiguration(configurations, TEST_COMPILE_CONFIGURATION_NAME, "Compile", SourceSet.TEST_SOURCE_SET_NAME);
        Configuration testRuntimeConfiguration = createBackportedConfiguration(configurations, TEST_RUNTIME_CONFIGURATION_NAME, "Runtime", SourceSet.TEST_SOURCE_SET_NAME);
        testRuntimeConfiguration.extendsFrom(testCompileConfiguration);
        testCompileConfiguration.extendsFrom(compileConfiguration);
        testRuntimeConfiguration.extendsFrom(runtimeConfiguration);
        Configuration testRuntimeClasspathConfiguration = configurations.getByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME);
        testRuntimeClasspathConfiguration.extendsFrom(testRuntimeConfiguration);
    }

    private Configuration createBackportedConfiguration(ConfigurationContainer configurations, String configurationName, String depsKind, String sourceSetName) {
        return configurations.create(configurationName, cnf -> {
            cnf.setDescription(depsKind + " dependencies for " + sourceSetName + " (backported from Gradle 6, you should get rid of this!).");
        });
    }
}
